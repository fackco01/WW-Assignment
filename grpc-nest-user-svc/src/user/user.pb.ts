// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.0.2
//   protoc               v5.27.3
// source: user.proto

/* eslint-disable */
import { GrpcMethod, GrpcStreamMethod } from "@nestjs/microservices";
import { Observable } from "rxjs";

export const protobufPackage = "user";

export interface User {
  id: number;
  username: string;
  email: string;
  fullName: string;
  createdAt: number;
  updatedAt: number;
}

/** CreateUser */
export interface CreateUserRequest {
  username: string;
  email: string;
  password: string;
  fullName: string;
}

export interface CreateUserResponse {
  id: number;
  message: string;
  user: User | undefined;
}

/** UpdateUser */
export interface UpdateUserRequest {
  id: number;
  username: string;
  email: string;
  fullName: string;
}

export interface UpdateUserResponse {
  message: string;
  user: User | undefined;
}

/** GetAllUsers */
export interface GetAllUsersRequest {
  page: number;
  limit: number;
}

export interface GetAllUsersResponse {
  users: User[];
  total: number;
}

/** GetUserDetail */
export interface GetUserDetailRequest {
  id: number;
}

export interface GetUserDetailResponse {
  user: User | undefined;
}

/** DeleteUser */
export interface DeleteUserRequest {
  id: number;
}

export interface DeleteUserResponse {
  message: string;
}

/** ChangePassword */
export interface ChangePasswordRequest {
  userId: number;
  currentPassword: string;
  newPassword: string;
}

export interface ChangePasswordResponse {
  message: string;
}

export const USER_PACKAGE_NAME = "user";

export interface UserServiceClient {
  createUser(request: CreateUserRequest): Observable<CreateUserResponse>;

  updateUser(request: UpdateUserRequest): Observable<UpdateUserResponse>;

  getAllUsers(request: GetAllUsersRequest): Observable<GetAllUsersResponse>;

  getUserDetail(request: GetUserDetailRequest): Observable<GetUserDetailResponse>;

  deleteUser(request: DeleteUserRequest): Observable<DeleteUserResponse>;

  changePassword(request: ChangePasswordRequest): Observable<ChangePasswordResponse>;
}

export interface UserServiceController {
  createUser(
    request: CreateUserRequest,
  ): Promise<CreateUserResponse> | Observable<CreateUserResponse> | CreateUserResponse;

  updateUser(
    request: UpdateUserRequest,
  ): Promise<UpdateUserResponse> | Observable<UpdateUserResponse> | UpdateUserResponse;

  getAllUsers(
    request: GetAllUsersRequest,
  ): Promise<GetAllUsersResponse> | Observable<GetAllUsersResponse> | GetAllUsersResponse;

  getUserDetail(
    request: GetUserDetailRequest,
  ): Promise<GetUserDetailResponse> | Observable<GetUserDetailResponse> | GetUserDetailResponse;

  deleteUser(
    request: DeleteUserRequest,
  ): Promise<DeleteUserResponse> | Observable<DeleteUserResponse> | DeleteUserResponse;

  changePassword(
    request: ChangePasswordRequest,
  ): Promise<ChangePasswordResponse> | Observable<ChangePasswordResponse> | ChangePasswordResponse;
}

export function UserServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = [
      "createUser",
      "updateUser",
      "getAllUsers",
      "getUserDetail",
      "deleteUser",
      "changePassword",
    ];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod("UserService", method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const USER_SERVICE_NAME = "UserService";
